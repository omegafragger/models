// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =============================================================================

#ifndef DRAGNN_RUNTIME_XLA_XLA_AOT_DYNAMIC_COMPONENT_H_
#define DRAGNN_RUNTIME_XLA_XLA_AOT_DYNAMIC_COMPONENT_H_

#include <string>

#include "dragnn/protos/export.pb.h"
#include "dragnn/protos/spec.pb.h"
#include "dragnn/runtime/component.h"
#include "dragnn/runtime/xla/sequence_xla_dynamic_component_mixin.h"
#include "dragnn/runtime/xla/xla_dynamic_component_base.h"
#include "dragnn/runtime/xla/xla_graph_utils.h"
#include "dragnn/runtime/xla/xla_spec_utils.h"
#include "syntaxnet/base.h"
#include "tensorflow/compiler/tf2xla/tf2xla.pb.h"
#include "tensorflow/compiler/tf2xla/xla_compiled_cpu_function.h"
#include "tensorflow/core/framework/graph.pb.h"
#include "tensorflow/core/lib/core/errors.h"
#include "tensorflow/core/lib/core/status.h"
#include "tensorflow/core/lib/strings/strcat.h"

namespace syntaxnet {
namespace dragnn {
namespace runtime {

// An XLA-based version of DynamicComponent using an XLA AOT compiled library.

//
// The class |AotCell| is generated by a tf_library build rule.
//
// The component class is instantiated in C++ code generated by a
// dragnn_xla_aot_components() build rule. The default constructor must set
// the model and component names to non-empty strings, and this must match
// the registered class name, as generated by RegisteredName().
//
// Example instantiation and registration:
//
// class XlaAotDynamicComponent_model_component
//     : public XlaAotDynamicComponent<model::component> {
//  public:
//   XlaAotDynamicComponent_model_component()
//       : XlaAotDynamicComponent<model::component>("model", "component") {}
// };
// DRAGNN_RUNTIME_REGISTER_COMPONENT(XlaAotDynamicComponent_model_component);

template <typename AotCell>
class XlaAotDynamicComponent : public XlaDynamicComponentBase {
 protected:
  XlaAotDynamicComponent(const string &model_name, const string &component_name)
      : model_name_(model_name), component_name_(component_name) {}

  // Unlike other specializations, this component will only be active if the
  // spec is explicitly modified to support XLA AOT.
  bool Supports(const ComponentSpec &spec,
                const string &normalized_builder_name) const override {
    // This must accept both the "base" XLA component and this one, based on how
    // Supports is called repeatedly.
    return (normalized_builder_name == "XlaDynamicComponent" ||
            normalized_builder_name == RegisteredName()) &&
           spec.name() == component_name_ &&
           ModelNameForComponent(spec) == model_name_ &&
           GetCellSubgraphSpecForComponent(spec, nullptr).ok();
  }

  bool PreferredTo(const Component &other) const override {
    // AOT is preferred to JIT.
    return true;
  }

  // Gets the frozen GraphDef using the |component_spec| and compiles it.
  // The |cell_subgraph_spec| contained within it is filled in. On error,
  // returns non-OK.
  tensorflow::Status InitializeFromComponentSpec(
      const ComponentSpec &component_spec,
      CellSubgraphSpec *cell_subgraph_spec) override;

  const tensorflow::XlaCompiledCpuFunction::StaticData &XlaStaticData()
      const override {
    return AotCell::StaticData();
  }

 private:
  const string RegisteredName() const {
    return tensorflow::strings::StrCat("XlaAotDynamicComponent_", model_name_,
                                       "_", component_name_);
  }

  const string model_name_;
  const string component_name_;
};

template <typename AotCell>
tensorflow::Status XlaAotDynamicComponent<AotCell>::InitializeFromComponentSpec(
    const ComponentSpec &component_spec, CellSubgraphSpec *cell_subgraph_spec) {
  LOG(INFO) << "Using XLA AOT library for model/component: " << model_name_
            << "/" << component_name_;
  CHECK(!model_name_.empty() && !component_name_.empty());

  return GetCellSubgraphSpecForComponent(component_spec, cell_subgraph_spec);
}

// Sequence-based version of the above.
template <typename AotCell>
using SequenceXlaAotDynamicComponent =
    SequenceXlaDynamicComponentMixin<XlaAotDynamicComponent<AotCell>>;

}  // namespace runtime
}  // namespace dragnn
}  // namespace syntaxnet

#endif  // DRAGNN_RUNTIME_XLA_XLA_AOT_DYNAMIC_COMPONENT_H_
